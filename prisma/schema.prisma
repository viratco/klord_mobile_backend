generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AmcRequest {
  id         String    @id @default(cuid())
  leadId     String
  customerId String
  status     AmcStatus @default(pending)
  note       String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  resolvedAt DateTime?
  customer   Customer  @relation(fields: [customerId], references: [id])
  lead       Booking   @relation(fields: [leadId], references: [id])

  @@index([leadId])
  @@index([customerId])
}

model Customer {
  id          String       @id @default(cuid())
  mobile      String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  amcRequests AmcRequest[]
  leads       Booking[]
}

model Partner {
  id          String   @id @default(cuid())
  mobile      String   @unique
  name        String
  companyName String?
  email       String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Admin {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  posts        Post[]
}

model Staff {
  id           String    @id @default(cuid())
  email        String    @unique
  name         String
  phone        String?
  passwordHash String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  assignedBookings Booking[] @relation("StaffBookings")
}

model Post {
  id        String   @id @default(cuid())
  caption   String
  imageUrl  String
  likes     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String?
  author    Admin?   @relation(fields: [authorId], references: [id])
}

model Booking {
  id                     String       @id @default(cuid())
  customerId             String?
  projectType            String
  sizedKW                Float
  monthlyBill            Int
  billingCycleMonths     Int           @default(1) // 1 or 2
  pincode                String
  provider               PanelProvider?
  budgetINR              Int?
  withSubsidy            Boolean      @default(true)
  estimateINR            Int
  wp                     Int?
  plates                 Int?
  // Finance (receipt) inputs from 4/5
  ratePerKW              Float?
  networkChargePerUnit   Float?
  annualGenPerKW         Float?
  moduleDegradationPct   Float?
  omPerKWYear            Float?
  omEscalationPct        Float?
  tariffINR              Float?
  tariffEscalationPct    Float?
  lifeYears              Int?
  gstPct                 Float?
  gstAmount              Int?
  totalInvestment        Int?
  fullName               String
  phone                  String
  email                  String?
  address                String
  street                 String
  state                  String
  city                   String
  country                String
  zip                    String
  // Assignment
  assigned               Boolean      @default(false)
  assignedStaffId        String?
  assignedStaff          Staff?       @relation("StaffBookings", fields: [assignedStaffId], references: [id])
  percent                Int          @default(0)
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  certificateUrl         String?
  certificateGeneratedAt DateTime?
  amcRequests            AmcRequest[]
  customer               Customer?    @relation(fields: [customerId], references: [id])
  steps                  LeadStep[]

  @@index([customerId])
  @@index([assignedStaffId])
  @@index([pincode])
  @@map("Lead")
}

model LeadStep {
  id               String    @id @default(cuid())
  leadId           String
  name             String
  order            Int
  completed        Boolean   @default(false)
  completedAt      DateTime?
  completionNotes  String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  lead             Booking   @relation(fields: [leadId], references: [id])

  @@unique([leadId, order])
  @@index([leadId])
}

enum AmcStatus {
  pending
  in_progress
  resolved
  rejected
}


enum PanelProvider {
  waare
  tata
  satvik
  rayzon
  navitas
  pahal
  vikram
}
